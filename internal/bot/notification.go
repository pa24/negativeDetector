package bot

import (
	"NegativeDetector/internal/database"
	"bytes"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/sirupsen/logrus"
	"math/rand"
	"text/template"
)

var textUserPhrases = []string{
	"–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
	"–°–∞–º—ã–π –±–æ–ª—Ç–ª–∏–≤—ã–π",
	"–ù–µ—É–≥–æ–º–æ–Ω —á–∞—Ç–∞",
	"–ö–æ—Ä–æ–ª—å —á–∞—Ç–∞",
	"–ß–∞—Ç-–ª–∏–¥–µ—Ä",
	"–ì–ª–∞–≤–Ω—ã–π —Å–ª–æ–≤–µ—Å–Ω—ã–π –Ω–∏–Ω–¥–∑—è",
	"–ú–∞—Å—Ç–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
	"–ö–æ—Ä–æ–ª—å –∫–ª–∞–≤–∏—à",
	"–í–ª–∞—Å—Ç–µ–ª–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏–π",
	"–ì—É—Ä—É –æ–±—â–µ–Ω–∏—è",
	"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ '–ë–æ–ª—Ç–∞–∑–∞–≤—Ä-—è–∏—á–Ω–∏—Ü–∞'",
	"–ß–∞—Ç-–º–∞–≥–Ω–∞—Ç",
	"–ë–∞—Ç—è —á–∞—Ç–∏–∫–∞",
	"–°–µ—Ä–¥—Ü–µ –±–µ—Å–µ–¥—ã",
	"–†—ã—Ü–∞—Ä—å —Å–ª–æ–≤–µ—Å–Ω–æ–π –±–∏—Ç–≤—ã",
	"–ó–∞–≤–æ–¥–∏–ª–∞ —á–∞—Ç–∏–∫–∞",
	"–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏",
}

var voiceUserPhrases = []string{
	"–ú–∞—Å—Ç–µ—Ä –ø–æ–¥–∫–∞—Å—Ç–æ–≤",
	"–ì–æ–ª–æ—Å —á–∞—Ç–∞",
	"–ö–æ—Ä–æ–ª—å —ç—Ñ–∏—Ä–∞",
	"–ì–ª–∞–≤–Ω—ã–π –¥–∏–∫—Ç–æ—Ä",
	"–ì—É—Ä—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
	"–í–ª–∞—Å—Ç–µ–ª–∏–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞",
	"–ì–ª–∞–≤–Ω—ã–π —à–µ–ø—Ç–∞—Ç–µ–ª—å –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω",
	"–ú–∞—ç—Å—Ç—Ä–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞",
	"–ì–æ–ª–æ—Å–æ–≤–æ–π –≥–∏–≥–∞–Ω—Ç",
	"–ì—É—Ä—É –≥–æ–ª–æ—Å–æ–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
}

var videoNoneUserPhrases = []string{
	"–ö–∏–Ω–æ—Ä–µ–∂–∏—Å—Å—ë—Ä —á–∞—Ç–∞",
	"–ó–≤–µ–∑–¥–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π",
	"–ö–æ—Ä–æ–ª—å-–≤–∏–¥–µ–æ–º–∞–≥–Ω–∞—Ç",
	"–ì–ª–∞–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä",
	"–ú–∞—Å—Ç–µ—Ä –∫–ª–∏–ø–æ–≤",
	"–ì–ª–∞–≤–Ω—ã–π –∫—Ä—É–∂–æ–∫ –º–µ–π–∫–µ—Ä",
	"–°—Ç–∞—Ä—à–∏–π –∫—Ä—É–∂–∫–æ–¥–µ–ª–∞—Ç–µ–ª—å",
	"–ö–∞–º–µ—Ä–∞-–º–∞–Ω—å—è–∫",
}

type Stats struct {
	TotalMessages             int
	TotalWords                int
	MostActiveUserPhrase      string
	MostActiveVoicePhrase     string
	MostActiveVideoNotePhrase string
	MostActiveUserID          string
	MostActiveUserMessages    string
	TopVoiceUser              string
	TopVoiceMessages          int
	TopVideoUser              string
	TopVideoMessages          int
}

// sendNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ

func SendDailyStats(bot *tgbotapi.BotAPI, db *database.Database, chatID int64, notifierChatID int64) error {
	stats, err := database.GetDailyStats(db, chatID)
	if err != nil {
		return fmt.Errorf("failed to get daily stats: %v", err)
	}

	prepareStats := Stats{
		TotalMessages:             stats.TotalMessages,
		TotalWords:                stats.TotalWords,
		MostActiveUserPhrase:      getRandomPhrase(textUserPhrases),
		MostActiveVoicePhrase:     getRandomPhrase(voiceUserPhrases),
		MostActiveVideoNotePhrase: getRandomPhrase(videoNoneUserPhrases),
		MostActiveUserID:          stats.MostActiveUserID,
		MostActiveUserMessages:    pluralizeMessages(stats.MostActiveUserMessages),
		TopVoiceUser:              stats.TopVoiceUser,
		TopVoiceMessages:          stats.TopVoiceMessages,
		TopVideoUser:              stats.TopVideoUser,
		TopVideoMessages:          stats.TopVideoMessages,
	}

	message, err := generateMessage(prepareStats)
	if err != nil {
		fmt.Println("Error generating message:", err)
		return err
	}
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
	msg := tgbotapi.NewMessage(notifierChatID, message)
	msg.ParseMode = "Markdown"

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send message: %v", err)
	}
	return nil
}

func generateMessage(stats Stats) (string, error) {
	templateText := `üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å:*

üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: *{{.TotalMessages}}*
üìù –í—Å–µ–≥–æ —Å–ª–æ–≤ –±—ã–ª–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ: *{{.TotalWords}}*
üëë {{.MostActiveUserPhrase}}: *{{.MostActiveUserID}}* ({{.MostActiveUserMessages}})
üéôÔ∏è {{.MostActiveVoicePhrase}}: *{{.TopVoiceUser}}* ({{.TopVoiceMessages}})
üé• {{.MostActiveVideoNotePhrase}}: *{{.TopVideoUser}}* ({{.TopVideoMessages}})
`

	tmpl, err := template.New("stats").Parse(templateText)
	if err != nil {
		return "", err
	}

	var buf bytes.Buffer
	err = tmpl.Execute(&buf, stats)
	if err != nil {
		return "", err
	}

	return buf.String(), nil
}

func pluralizeMessages(num int) string {
	if num%10 == 1 && num%100 != 11 {
		return fmt.Sprintf("%d —Å–æ–æ–±—â–µ–Ω–∏–µ", num)
	} else if num%10 >= 2 && num%10 <= 4 && (num%100 < 10 || num%100 >= 20) {
		return fmt.Sprintf("%d —Å–æ–æ–±—â–µ–Ω–∏—è", num)
	}
	return fmt.Sprintf("%d —Å–æ–æ–±—â–µ–Ω–∏–π", num)
}

func getRandomPhrase(phrases []string) string {
	if len(phrases) == 0 {
		return ""
	}
	return phrases[rand.Intn(len(phrases))]
}

func sendNotification(bot *tgbotapi.BotAPI, message *tgbotapi.Message, mediaGroupCache map[string]bool, link string) {
	if message.MediaGroupID != "" {
		mediaGroupCache[message.MediaGroupID] = true
	}
	messageFromUserName := message.From.UserName
	textNotification := fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s —É–¥–∞–ª–µ–Ω–æ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≥–∞—Ç–∏–≤. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç: %s", messageFromUserName, link)
	msg := tgbotapi.NewMessage(message.Chat.ID, textNotification)
	//msg.ParseMode = "Markdown"
	if _, err := bot.Send(msg); err != nil {
		log.Errorf("Failed to send notification: %v", err)
	}
}
